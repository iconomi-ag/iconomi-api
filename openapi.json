{
  "openapi": "3.0.1",
  "info": {
    "title": "Iconomi API",
    "version": "1.3"
  },
  "servers": [
    {
      "url": "https://api.iconomi.com",
      "description": "Live Server",
      "variables": {}
    },
    {
      "url": "https://api-demo.iconomi.com",
      "description": "Sandbox Server",
      "variables": {}
    }
  ],
  "tags": [
    {
      "name": "Asset",
      "description": "Asset endpoint"
    },
    {
      "name": "Strategies",
      "description": "Strategies, previously called DAAs"
    },
    {
      "name": "Trading",
      "description": "Orders and trading"
    },
    {
      "name": "User",
      "description": "User data"
    },
    {
      "name": "WebSocket Feed",
      "description": "Using the WebSocket feed you can get close to real-time data on different events that take place on the ICONOMI platform.\nTo start receiving feed messages, first send a subscribe message indicating which channels you want to subscribe to.\nAll requests follow this following format\n\n| Parameter  | Description   | Sample  |\n|---|---|---|\n| **type** <br> *String*        |   Always provide the value \"subscribe\"      |    subscribe    |\n| **channel** <br> *String*     |     The channel to which you are subscribing    |     daa/price   |\n|  <br> *Channel-specific*     |     Optional additional data specific  |       |\n\n### Strategy price feed\n\nYou can subscribe to a price feed of strategy prices. The latest prices are sent every minute.\n\nChannel-specific data:\n\n| Parameter  | Description   | Sample  |\n|---|---|---|\n| **ticker** <br> *String*        |   Ticker of the strategy to receive the price feed for     |    BLX    |\n\n##### Subscription request\n\nExample:\n\n```\n{\n    \"type\":\"subscribe\",\n    \"channel\": \"daa/price\",\n    \"ticker\": \"BLX\"\n}\n```\n\n##### Feed message\n\nExample:\n\n```\n {\n    \"type\":\"price\",\n    \"price\":\n    {\n       \"ticker\":\"BLX\",\n       \"currency\":\"USD\",\n       \"price\":\"1.36\"\n    }\n }\n```"
    },
    {
      "name": "WebSocket RPC",
      "description": "The WebSocket RPC is publicly available, but connections to it are rate-limited to 1 request per 4 seconds per IP.\nThe WebSocket API is available at `wss://api.iconomi.com/v1/ws`. The current version is v1.\n\nRequests and responses are application/json content type.  The general message format used for both requests and responses is a structure with message type as the first attribute,  followed by the objects of the request/response.\n\nExample request:\n\n```\n{\n  \"type\": \"daa\",\n  \"ticker\" : \"BLX\"\n}\n```\n\n### Strategy list\n\nReturns a list of all public DAAs.\n\n##### Request\n\nExample:\n\n```\n{\n    \"type\": \"daalist\"\n}\n```\n\n##### Response\n\nResult is an array of the following entities:\n\n| Parameter  | Description   | Sample  |\n|---|---|---|\n| **name** <br> *String*        |   Name of strategy      |    Blockchain Index    |\n| **manager** <br> *String*     |     Manager of strategy     |     Columbus Capital   |\n| **ticker** <br> *String*     |     Strategy ticker      |     BLX   |\n| **type** <br> *String*     |     Type of strategy. See strategy types under enumerations section for possible options.      |     PASSIVE   |\n\nExample:\n\n```\n{\n    \"type\":\"daalist\",\n    \"daalist\":\n    [\n        {\n            \"name\":\"Blockchain Index\",\n            \"manager\":\"Columbus Capital\",\n            \"ticker\":\"BLX\",\n            \"type\":\"PASSIVE\"\n        },\n        {\n            \"name\":\"Pinta\",\n            \"manager\":\"Columbus Capital\",\n            \"ticker\":\"CCP\",\n            \"type\":\"ACTIVE\"\n        }\n    ]\n}\n```\n\n### Strategy details\n\nReturns details of a specific strategy.\n\n##### Request\n\nExample:\n\n```\n{\n    \"type\": \"daa\",\n    \"ticker\": \"BLX\"\n}\n```\n\n##### Response\n\nThe result is an array of the following entities:\n\n| Parameter  | Description   | Sample  |\n|---|---|---|\n| **name** <br> *String*        |   Name of strategy      |    Blockchain Index    |\n| **manager** <br> *String*     |     Manager of strategy     |     Columbus Capital   |\n| **ticker** <br> *String*     |     Strategy ticker      |     BLX   |\n| **type** <br> *String*     |     Type of strategy. See strategy types under enumerations section for possible options.      |     PASSIVE   |\n\nExample:\n\n```\n{\n    \"type\":\"daa\",\n    \"name\":\"Blockchain Index\",\n    \"manager\":\"Columbus Capital\",\n    \"ticker\":\"BLX\",\n    \"type\":\"PASSIVE\"\n}\n```\n\n### User balance\n\nReturns user balance based on authentication.\n\n##### Request\n\nExample:\n\nEmpty body.\n\n##### Response\n\n | Parameter  | Description   | Sample  |\n|---|---|---|\n| **currency** <br> *String*        |   Currency in which the values are returned | USD  |\n| **daaList** <br> *BalanceEntry*     | Array of portfolios balances   |   |\n| **assetList** <br> *BalanceEntry*     | Array of cryptocurrency balances  |   |\n\nBalanceEntry is of the following structure:\n\n| Parameter  | Description   | Sample  |\n|---|---|---|\n| **name** <br> *String*        |   Name of asset | Blockchain index  |\n| **ticker** <br> *String*     | Ticker of asset  | BLX  |\n| **balance** <br> *String*     | Balance of the asset  | 1337  |\n| **value** <br> *String*     | Value in USD or EUR (depending on the optional currency in query string)  | 4700  |\n\nExample:\n```\n{\n  \"currency\": \"USD\",\n  \"daaList\": [\n    {\n      \"name\": \"Blockchain Index\",\n      \"ticker\": \"BLX\",\n      \"balance\": \"1337\",\n      \"value\": \"4700\"\n    }\n  ],\n  \"assetList\": [\n    {\n      \"name\": \"Bitcoin\",\n      \"ticker\": \"BTC\",\n      \"balance\": \"1\",\n      \"value\": \"29998\"\n    }\n  ]\n}\n```"
    }
  ],
  "paths": {
    "/v1/assets": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "List of Assets",
        "description": "Returns a list of all assets on platform.",
        "operationId": "assetList",
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/assets/{ticker}": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Asset details",
        "description": "Returns information about one specific Asset.",
        "operationId": "assetDetails",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetInfo"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/assets/{ticker}/price": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Current ticker",
        "description": "Returns the current ticker of the Asset. The price is refreshed every minute.",
        "operationId": "assetTicker",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticker"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/assets/{ticker}/pricehistory": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Historical information",
        "description": "The price history returns data points for the given period. Different granulation of\ndata can be returned based on the length of the period provided from daily to 5 minute (one \nprice point per period).\n\nFrom and to are optional parameters (both are either supplied or neither is supplied). If from/to are not supplied a default of last month is returned\nwith hourly granulation.",
        "operationId": "assetHistory",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ]
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "granulation",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "TWO_MINUTE",
                "FIVE_MINUTE",
                "FIFTEEN_MINUTE",
                "HOURLY",
                "THREE_HOURLY",
                "EIGHT_HOURLY",
                "DAILY"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chart"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/assets/{ticker}/statistics": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Statistics",
        "description": "Returns statistics of the strategy; returns, max drawdown and volatility for strategy.",
        "operationId": "assetStatistics",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Statistics"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Statistics"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/order": {
      "post": {
        "tags": [
          "Trading"
        ],
        "summary": "Place order",
        "description": "Placing user's logical order.",
        "operationId": "orderTrade",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderInfo"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/order/offer": {
      "post": {
        "tags": [
          "Trading"
        ],
        "summary": "Trade offer",
        "description": "Generating trade offer.",
        "operationId": "orderOffer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderOffer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeOffer"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/order/offer/{offerId}/confirm": {
      "post": {
        "tags": [
          "Trading"
        ],
        "summary": "Confirm trade offer",
        "description": "This endpoint confirms generated trade offer.",
        "operationId": "confirmOffer",
        "parameters": [
          {
            "name": "offerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TradeConfirm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeConfirm"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/order/orders": {
      "get": {
        "tags": [
          "Trading"
        ],
        "summary": "List of orders",
        "description": "Returns a list of all user's logical orders.",
        "operationId": "getAllOrders",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderInfo"
                  }
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/order/{orderId}": {
      "get": {
        "tags": [
          "Trading"
        ],
        "summary": "Logical order",
        "description": "Returns a user's logical order.",
        "operationId": "status",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderInfo"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Trading"
        ],
        "summary": "Delete",
        "description": "Remove user's logical order.",
        "operationId": "cancelOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderInfo"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/strategies": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "List of Strategies",
        "description": "Returns a list of all public Strategies.",
        "operationId": "strategyList",
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Strategy"
                  }
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/strategies/{ticker}": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Strategy details",
        "description": "Returns information about one specific strategy.",
        "operationId": "info",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "description": "Ticker of structure",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "BLX"
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Strategy"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/strategies/{ticker}/balance": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Balance",
        "description": "Endpoint requires manager authentication with institutional role. Returns live balances underlying assets of strategy.",
        "operationId": "daaBalance",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrategyBalance"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/strategies/{ticker}/price": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Current ticker",
        "description": "Returns the current ticker of the Strategy. The price is refreshed every minute.",
        "operationId": "daaPrice",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticker"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/strategies/{ticker}/pricehistory": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Historical information",
        "description": "The price history returns data points for the given period. Different granulation of\ndata can be returned based on the length of the period provided from daily to 5 minute (one \nprice point per period).\n\nFrom and to are optional parameters (both are either suplied or neither is supplied). If from/to are not supplied a default of last month is returned\nwith hourly granulation.",
        "operationId": "charts",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ]
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "granulation",
            "in": "query",
            "description": "Granulation for price points. See granulation enumeration section for more details.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "TWO_MINUTE",
                "FIVE_MINUTE",
                "FIFTEEN_MINUTE",
                "HOURLY",
                "THREE_HOURLY",
                "EIGHT_HOURLY",
                "DAILY"
              ]
            },
            "example": "HOURLY"
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chart"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/strategies/{ticker}/statistics": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Statistics",
        "description": "Returns statistics of the strategy; returns, max drawdown and volatility for strategy.",
        "operationId": "getStatistics",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Statistics"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Statistics"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/strategies/{ticker}/structure": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Structure",
        "description": "Returns the current structure of a strategy. The same result entity is returned \nfor both PASSIVE and ACTIVE type DAAs, but for ACTIVE DAAs rebalancedWeight \nand targetWeight are always set to 0.",
        "operationId": "structure",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Structure"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Strategies"
        ],
        "summary": "Structure",
        "description": "Endpoint requires authentication. Creates and submits a new structure for a given strategy. \n\nResponse is the same object as GET to /v1/strategies/{ticker}/structure.",
        "operationId": "submitStructure",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StructureSubmit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Structure"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "ApiTimestamp": []
          },
          {
            "ApiSign": []
          }
        ]
      }
    },
    "/v1/user/activity": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Activity",
        "description": "Endpoint returns user's activity (buy, sell, deposit, withdraw).",
        "operationId": "getActivities",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "MY_ACTIVITIES",
              "enum": [
                "MY_ACTIVITIES",
                "FEES_AND_EARNINGS"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/balance": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "User Balance",
        "description": "Endpoint requires authentication. Returns the balance based on the authentication of the user. \n\nThere is an optional query parameter currency that changes the resulting fiat value calculation to chosen currency. Possibly values are EUR or USD.\n\n##### Request\n\nEmpty body.\n\n##### Response\n\n| Parameter  | Description   | Sample  |\n|---|---|---|\n| **currency** <br> *String*        |   Currency in which the values are returned | USD  |\n| **daaList** <br> *BalanceEntry*     | Array of portfolios balances   |   |\n| **assetList** <br> *BalanceEntry*     | Array of cryptocurrency balances  |   |\n\nBalanceEntry is of the following structure:\n\n| Parameter  | Description   | Sample  |\n| ---|---|---|\n| **name** <br> _String_ | Name of asset | Blockchain index  |\n| **ticker** <br> _String_  | Ticker of asset  | BLX  |\n| **balance** <br> _String_  | Balance of the asset  | 1337  |\n| **value** <br> _String_  | Value in USD or EUR (depending on the optional currency in query string)  | 4700  |",
        "operationId": "getUserBalance",
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Balance"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Balance"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/deposit/{currency}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Deposit",
        "description": "Endpoint returns user's crypto address.",
        "operationId": "getDepositAddress",
        "parameters": [
          {
            "name": "currency",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deposit"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/transaction/{transactionId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Transaction",
        "description": "Endpoint returns details about user's transaction.",
        "operationId": "transactionInfo",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/withdraw": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Withdraw",
        "description": "Endpoint allows to make withdraw asset from user's account to recipient's address. Recipient's address must be whitelisted at ICONOMI platform.",
        "operationId": "withdraw",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Withdraw"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "OrderOffer": {
        "required": [
          "amount",
          "side",
          "source_ticker",
          "target_ticker"
        ],
        "type": "object",
        "properties": {
          "source_ticker": {
            "type": "string"
          },
          "target_ticker": {
            "type": "string"
          },
          "amount": {
            "minimum": 0,
            "type": "number"
          },
          "side": {
            "type": "string",
            "enum": [
              "source",
              "target"
            ]
          }
        }
      },
      "TradeOffer": {
        "type": "object",
        "properties": {
          "offerId": {
            "type": "string"
          },
          "sourceTicker": {
            "type": "string"
          },
          "targetTicker": {
            "type": "string"
          },
          "sourceAmount": {
            "type": "number"
          },
          "targetAmount": {
            "type": "number"
          },
          "exchangeRate": {
            "type": "number"
          },
          "feeAmount": {
            "type": "number"
          },
          "feeTicker": {
            "type": "string"
          },
          "sellingAssets": {
            "type": "boolean"
          },
          "validTo": {
            "type": "integer",
            "format": "int64"
          },
          "serverTime": {
            "type": "integer",
            "format": "int64"
          },
          "error": {
            "type": "string"
          },
          "used": {
            "type": "boolean"
          }
        }
      },
      "Ticker": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "change24h": {
            "type": "number"
          },
          "change7d": {
            "type": "number"
          },
          "change1m": {
            "type": "number"
          },
          "change3m": {
            "type": "number"
          },
          "change6m": {
            "type": "number"
          },
          "change12m": {
            "type": "number"
          },
          "changeAll": {
            "type": "number"
          },
          "aum": {
            "type": "number"
          }
        }
      },
      "Strategy": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "manager": {
            "type": "string"
          },
          "managementType": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PASSIVE"
            ]
          },
          "managementFee": {
            "type": "number"
          },
          "performanceFee": {
            "type": "number"
          },
          "performanceFeeCollectionPeriod": {
            "type": "string"
          },
          "entryFee": {
            "type": "number"
          },
          "exitFee": {
            "type": "number"
          },
          "followers": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Chart": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "BTC",
              "USD",
              "EUR"
            ]
          },
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "granulation": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartPoint"
            }
          }
        }
      },
      "ChartPoint": {
        "type": "object",
        "properties": {
          "x": {
            "type": "integer",
            "format": "int64"
          },
          "y": {
            "type": "string"
          }
        }
      },
      "OrderInfo": {
        "required": [
          "source_ticker",
          "target_ticker"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "created",
              "active",
              "done",
              "failed",
              "unknown"
            ]
          },
          "orderId": {
            "type": "string"
          },
          "percentageCompleted": {
            "type": "number"
          },
          "source_ticker": {
            "type": "string"
          },
          "target_ticker": {
            "type": "string"
          },
          "amount": {
            "minimum": 0,
            "type": "number"
          }
        }
      },
      "Withdraw": {
        "required": [
          "address",
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        }
      },
      "Transaction": {
        "required": [
          "amount_ticker",
          "fee_ticker",
          "performance_fee_ticker",
          "profit_ticker",
          "source_ticker",
          "target_ticker",
          "vat_ticker"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "exchangeRate": {
            "type": "number"
          },
          "paymentMethod": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "amount_ticker": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "source_ticker": {
            "type": "string"
          },
          "source_amount": {
            "type": "number"
          },
          "target_ticker": {
            "type": "string"
          },
          "target_amount": {
            "type": "number"
          },
          "fee_ticker": {
            "type": "string"
          },
          "fee_amount": {
            "type": "number"
          },
          "vat_ticker": {
            "type": "string"
          },
          "vat_amount": {
            "type": "number"
          },
          "performance_fee_ticker": {
            "type": "string"
          },
          "performance_fee_amount": {
            "type": "number"
          },
          "profit_ticker": {
            "type": "string"
          },
          "profit_amount": {
            "type": "number"
          }
        }
      },
      "Activity": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "StrategyBalance": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StrategyBalanceElement"
            }
          }
        }
      },
      "StrategyBalanceElement": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          }
        }
      },
      "Order": {
        "required": [
          "amount",
          "side",
          "source_ticker",
          "target_ticker"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "source_ticker": {
            "type": "string"
          },
          "target_ticker": {
            "type": "string"
          },
          "amount": {
            "minimum": 0,
            "type": "number"
          },
          "side": {
            "type": "string",
            "enum": [
              "source",
              "target"
            ]
          }
        }
      },
      "Balance": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "daaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BalanceEntry"
            }
          },
          "assetList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BalanceEntry"
            }
          }
        }
      },
      "BalanceEntry": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "ticker": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Deposit": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        }
      },
      "AssetInfo": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Asset": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "supported": {
            "type": "boolean"
          },
          "useInStrategy": {
            "type": "boolean"
          },
          "tradable": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "ONLINE",
              "OFFLINE",
              "DELISTING",
              "DELISTED",
              "MAINTENANCE"
            ]
          }
        }
      },
      "StructureSubmit": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitStructureElement"
            }
          },
          "speedType": {
            "type": "string",
            "enum": [
              "SLOW",
              "MEDIUM",
              "FAST"
            ]
          }
        }
      },
      "SubmitStructureElement": {
        "type": "object",
        "properties": {
          "assetTicker": {
            "type": "string"
          },
          "rebalancedWeight": {
            "type": "number"
          }
        }
      },
      "Structure": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StructureElement"
            }
          },
          "numberOfAssets": {
            "type": "integer",
            "format": "int32"
          },
          "lastRebalanced": {
            "type": "integer",
            "format": "int64"
          },
          "monthlyRebalancedCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "StructureElement": {
        "type": "object",
        "properties": {
          "rebalancedWeight": {
            "type": "number"
          },
          "targetWeight": {
            "type": "number"
          },
          "assetTicker": {
            "type": "string"
          },
          "assetName": {
            "type": "string"
          },
          "assetCategory": {
            "type": "string"
          }
        }
      },
      "EnumMapIntervalBigDecimal": {
        "type": "object",
        "properties": {
          "DAY": {
            "type": "number"
          },
          "WEEK": {
            "type": "number"
          },
          "MONTH": {
            "type": "number"
          },
          "THREE_MONTH": {
            "type": "number"
          },
          "SIX_MONTH": {
            "type": "number"
          },
          "YTD": {
            "type": "number"
          },
          "YEAR": {
            "type": "number"
          },
          "ALL_TIME": {
            "type": "number"
          }
        }
      },
      "Statistics": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "returns": {
            "type": "object",
            "properties": {
              "DAY": {
                "type": "number"
              },
              "WEEK": {
                "type": "number"
              },
              "MONTH": {
                "type": "number"
              },
              "THREE_MONTH": {
                "type": "number"
              },
              "SIX_MONTH": {
                "type": "number"
              },
              "YTD": {
                "type": "number"
              },
              "YEAR": {
                "type": "number"
              },
              "ALL_TIME": {
                "type": "number"
              }
            }
          },
          "volatility": {
            "type": "object",
            "properties": {
              "DAY": {
                "type": "number"
              },
              "WEEK": {
                "type": "number"
              },
              "MONTH": {
                "type": "number"
              },
              "THREE_MONTH": {
                "type": "number"
              },
              "SIX_MONTH": {
                "type": "number"
              },
              "YTD": {
                "type": "number"
              },
              "YEAR": {
                "type": "number"
              },
              "ALL_TIME": {
                "type": "number"
              }
            }
          },
          "maxDrawdown": {
            "type": "object",
            "properties": {
              "DAY": {
                "type": "number"
              },
              "WEEK": {
                "type": "number"
              },
              "MONTH": {
                "type": "number"
              },
              "THREE_MONTH": {
                "type": "number"
              },
              "SIX_MONTH": {
                "type": "number"
              },
              "YTD": {
                "type": "number"
              },
              "YEAR": {
                "type": "number"
              },
              "ALL_TIME": {
                "type": "number"
              }
            }
          }
        }
      },
      "TradeConfirm": {
        "type": "object",
        "properties": {
          "offerId": {
            "type": "string"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "name": "ICN-API-KEY",
        "in": "header"
      },
      "ApiSign": {
        "type": "apiKey",
        "name": "ICN-SIGN",
        "in": "header"
      },
      "ApiTimestamp": {
        "type": "apiKey",
        "name": "ICN-TIMESTAMP",
        "in": "header"
      }
    }
  }
}
