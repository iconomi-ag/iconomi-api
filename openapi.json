{
  "openapi": "3.0.1",
  "info": {
    "title": "Iconomi API!",
    "description": "# Introduction\nWelcome to the ICONOMI Platform API. There are two ways to integrate with the ICONOMI platform, the REST API and a stream-oriented API using Websockets.\n\n## Versioning\n\nThis API maintains backward compatibility. Breaking changes to the API are managed by providing new endpoints. Old versions will remain available for two months after a new version is released and can then be removed at any time. All information about releases is published on this website.\nNon-breaking changes are released in the same major-version API.\n\n## Types\n\nAll request bodies should have content type application/json and be valid JSON.\n\n<br/>\n\n### Timestamps\n\nUnless otherwise specified, all timestamps will be returned in ISO 8601 with microseconds.\n\n<br/> Example:\n\n```\n2019-08-01T01:02:03.000004Z\n```\n\n<br/>\n\n### Numbers\n\nIntegers are unquoted.\n\n<br/> Example:\n\n```\n\"x\": 194767\n```\n\nDecimals are returned as strings with a period as a decimal separator and no thousands separator.\n\n<br/> Example:\n\n```\n\"price\": \"3.3847\"\n```\n\n<br/>\n\n### IDs\n\nAll IDs are UUIDs.\n\n<br/> Example:\n\n``` \n6EFB3D83-830A-42F8-84CD-2C307FE62AD8\n```\n\n<br/>\n\n### Enumerations\n\nThere are several enumerations on the platform that are used across the platform.\n\n#### Strategy types\nThere are different types of strategies supported on the platform which use different behaviour for \ninvestment:\n\n* **PASSIVE** - Strategies that have structures based set on percentages and are rebalances less often\n\n* **ACTIVE** - Strategies that follow a more active strategy not using an index\n\n#### Granulations\n\nDepending on the time period selected different granulation of data is possible as a result. \nFor each of the granulations there will be one data point available:\n\n* **TWO_MINUTE** - only available for institutional strategies.\n* **FIVE_MINUTE**\n* **HOURLY**\n* **THREE_HOURLY**\n* **EIGHT_HOURLY**\n* **DAILY**\n\n## Rate limiting\n\nThe public API (both the REST API and the Websocket API) allows for 60 requests per minute. This rate is subject to change.\n\n## Authentication\n\nTo access authenticated endpoints you need an account on the ICONOMI platform. After you have an account you need to setup your api\nkeys (you can find the option under Settings).\n\n### Creating a request\n\nAll REST requests must contain the following headers:\n\n* **ICN-API-KEY** - The api key as a string.\n* **ICN-SIGN** - The base64-encoded signature (see Signing a Message).\n* **ICN-TIMESTAMP** - A timestamp for your request in epoch milliseconds.\n\n<br/>\n \n### Signing a Message\n\nYou generate the **ICN-SIGN** header by creating a **sha512 HMAC** using the base64-decoded secret key on the prehash string timestamp + method + requestPath + body (where + represents string concatenation) and base64-encode the output, where:\n* the timestamp value is the same as the **ICN-TIMESTAMP** header.\n* the body is the request body string or omitted if there is no request body (typically for GET requests). \n* method must always be in upper case\n\nExample:\n``` \nbase64_encode(HMAC_SHA512(secret_key, timestamp + upper_case(method) + requestPath + body))\n```\n\n<br/>\n\n### Postman\n\nYou can also try with <a href=\"https://www.postman.com/downloads/\" target=\"_blank\" rel=\"nofollow\">postman client</a>. After you import <a href=\"https://www.postman.com/collections/2d5e387a761a6da9f022\" target=\"_blank\" rel=\"nofollow\">collection</a> into client, you have to create new environment under \"Manage environments\" and add two variables:\n\n<br>\n\n* **ICN-API-KEY** - The api key from your account on ICONOMI platform\n* **ICN-SECRET** - The secret key from your account on ICONOMI platform\n\n<br/>\n\nBefore you execute any of those endpoints, environment must be selected.\n\n### Websocket Authentication\n\nIt is possible to authenticate yourself when subscribing to the websocket feed.\n\nWhen opening connection to websocket, add additional headers, as if you were signing a request. To get the necessary parameters, you would go through the same process as you do to make authenticated calls to the API.\n\n## Sample libraries\nYou can find sample libraries for communicating with our API at our <a href=\"https://github.com/iconomi-ag\" target=\"_blank\" rel=\"nofollow\">github page.</a>\n\n## Bug reports\nFor any bug reports in the documentation or the API, feel free to report them to our <a href=\"https://github.com/iconomi-ag/iconomi-api\" target=\"_blank\" rel=\"nofollow\">github page.</a>",
    "version": "1.3"
  },
  "servers": [
    {
      "url": "https://api.iconomi.com",
      "description": "Live Server!"
    }
  ],
  "tags": [
    {
      "name": "Asset",
      "description": "Asset endpoint"
    },
    {
      "name": "Strategies",
      "description": "Strategies, previously called DAAs"
    },
    {
      "name": "Trading",
      "description": "Orders and trading"
    },
    {
      "name": "User",
      "description": "User data"
    },
    {
      "name": "WebSocket Feed",
      "description": "Using the WebSocket feed you can get close to real-time data on different events that take place on the ICONOMI platform.\nTo start receiving feed messages, first send a subscribe message indicating which channels you want to subscribe to.\nAll requests follow this following format\n\n| Parameter  | Description   | Sample  |\n|---|---|---|\n| **type** <br> *String*        |   Always provide the value \"subscribe\"      |    subscribe    |\n| **channel** <br> *String*     |     The channel to which you are subscribing    |     daa/price   |\n|  <br> *Channel-specific*     |     Optional additional data specific  |       |\n\n### Strategy price feed\n\nYou can subscribe to a price feed of strategy prices. The latest prices are sent every minute.\n\nChannel-specific data:\n\n| Parameter  | Description   | Sample  |\n|---|---|---|\n| **ticker** <br> *String*        |   Ticker of the strategy to receive the price feed for     |    BLX    |\n\n##### Subscription request\n\nExample:\n\n```\n{\n    \"type\":\"subscribe\",\n    \"channel\": \"daa/price\",\n    \"ticker\": \"BLX\"\n}\n```\n\n##### Feed message\n\nExample:\n\n```\n {\n    \"type\":\"price\",\n    \"price\":\n    {\n       \"ticker\":\"BLX\",\n       \"currency\":\"USD\",\n       \"price\":\"1.36\"\n    }\n }\n```"
    },
    {
      "name": "WebSocket RPC",
      "description": "The WebSocket RPC is publicly available, but connections to it are rate-limited to 1 request per 4 seconds per IP.\nThe WebSocket API is available at `wss://api.iconomi.com/v1/ws`. The current version is v1.\n\nRequests and responses are application/json content type.  The general message format used for both requests and responses is a structure with message type as the first attribute,  followed by the objects of the request/response.\n\nExample request:\n\n```\n{\n  \"type\": \"daa\",\n  \"ticker\" : \"BLX\"\n}\n```\n\n### Strategy list\n\nReturns a list of all public DAAs.\n\n##### Request\n\nExample:\n\n```\n{\n    \"type\": \"daalist\"\n}\n```\n\n##### Response\n\nResult is an array of the following entities:\n\n| Parameter  | Description   | Sample  |\n|---|---|---|\n| **name** <br> *String*        |   Name of strategy      |    Blockchain Index    |\n| **manager** <br> *String*     |     Manager of strategy     |     Columbus Capital   |\n| **ticker** <br> *String*     |     Strategy ticker      |     BLX   |\n| **type** <br> *String*     |     Type of strategy. See strategy types under enumerations section for possible options.      |     PASSIVE   |\n\nExample:\n\n```\n{\n    \"type\":\"daalist\",\n    \"daalist\":\n    [\n        {\n            \"name\":\"Blockchain Index\",\n            \"manager\":\"Columbus Capital\",\n            \"ticker\":\"BLX\",\n            \"type\":\"PASSIVE\"\n        },\n        {\n            \"name\":\"Pinta\",\n            \"manager\":\"Columbus Capital\",\n            \"ticker\":\"CCP\",\n            \"type\":\"ACTIVE\"\n        }\n    ]\n}\n```\n\n### Strategy details\n\nReturns details of a specific strategy.\n\n##### Request\n\nExample:\n\n```\n{\n    \"type\": \"daa\",\n    \"ticker\": \"BLX\"\n}\n```\n\n##### Response\n\nThe result is an array of the following entities:\n\n| Parameter  | Description   | Sample  |\n|---|---|---|\n| **name** <br> *String*        |   Name of strategy      |    Blockchain Index    |\n| **manager** <br> *String*     |     Manager of strategy     |     Columbus Capital   |\n| **ticker** <br> *String*     |     Strategy ticker      |     BLX   |\n| **type** <br> *String*     |     Type of strategy. See strategy types under enumerations section for possible options.      |     PASSIVE   |\n\nExample:\n\n```\n{\n    \"type\":\"daa\",\n    \"name\":\"Blockchain Index\",\n    \"manager\":\"Columbus Capital\",\n    \"ticker\":\"BLX\",\n    \"type\":\"PASSIVE\"\n}\n```\n\n### User balance\n\nReturns user balance based on authentication.\n\n##### Request\n\nExample:\n\nEmpty body.\n\n##### Response\n\n | Parameter  | Description   | Sample  |\n|---|---|---|\n| **currency** <br> *String*        |   Currency in which the values are returned | USD  |\n| **daaList** <br> *BalanceEntry*     | Array of portfolios balances   |   |\n| **assetList** <br> *BalanceEntry*     | Array of cryptocurrency balances  |   |\n\nBalanceEntry is of the following structure:\n\n| Parameter  | Description   | Sample  |\n|---|---|---|\n| **name** <br> *String*        |   Name of asset | Blockchain index  |\n| **ticker** <br> *String*     | Ticker of asset  | BLX  |\n| **balance** <br> *String*     | Balance of the asset  | 1337  |\n| **value** <br> *String*     | Value in USD or EUR (depending on the optional currency in query string)  | 4700  |\n\nExample:\n```\n{\n  \"currency\": \"USD\",\n  \"daaList\": [\n    {\n      \"name\": \"Blockchain Index\",\n      \"ticker\": \"BLX\",\n      \"balance\": \"1337\",\n      \"value\": \"4700\"\n    }\n  ],\n  \"assetList\": [\n    {\n      \"name\": \"Bitcoin\",\n      \"ticker\": \"BTC\",\n      \"balance\": \"1\",\n      \"value\": \"29998\"\n    }\n  ]\n}\n```"
    }
  ],
  "paths": {
    "/v1/assets": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "List of Assets",
        "description": "Returns a list of all assets on platform.",
        "operationId": "assetList",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/assets/{ticker}": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Asset details",
        "description": "Returns information about one specific Asset.",
        "operationId": "assetDetails",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/assets/{ticker}/price": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Current ticker",
        "description": "Returns the current ticker of the Asset. The price is refreshed every minute.",
        "operationId": "assetTicker",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ],
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticker"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/assets/{ticker}/pricehistory": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Historical information",
        "description": "The price history returns data points for the given period. Different granulation of\ndata can be returned based on the length of the period provided from daily to 5 minute (one \nprice point per period).\n\nFrom and to are optional parameters (both are either supplied or neither is supplied). If from/to are not supplied a default of last month is returned\nwith hourly granulation.",
        "operationId": "assetHistory",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ],
              "default": "USD"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "granulation",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "TWO_MINUTE",
                "FIVE_MINUTE",
                "FIFTEEN_MINUTE",
                "HOURLY",
                "THREE_HOURLY",
                "EIGHT_HOURLY",
                "DAILY"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/assets/{ticker}/statistics": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Statistics",
        "description": "Returns statistics of the strategy; returns, max drawdown and volatility for strategy.",
        "operationId": "assetStatistics",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ],
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Statistics"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/order": {
      "post": {
        "tags": [
          "Trading"
        ],
        "summary": "Place order",
        "description": "Placing user's logical order.",
        "operationId": "orderTrade",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/order/offer": {
      "post": {
        "tags": [
          "Trading"
        ],
        "summary": "Trade offer",
        "description": "Generating trade offer.",
        "operationId": "orderOffer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderOffer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeOffer"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/order/offer/{offerId}/confirm": {
      "post": {
        "tags": [
          "Trading"
        ],
        "summary": "Confirm trade offer",
        "description": "This endpoint confirms generated trade offer.",
        "operationId": "confirmOffer",
        "parameters": [
          {
            "name": "offerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeConfirm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/order/orders": {
      "get": {
        "tags": [
          "Trading"
        ],
        "summary": "List of orders",
        "description": "Returns a list of all user's logical orders.",
        "operationId": "getAllOrders",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "IN_PROGRESS",
                "CANCELLED",
                "COMPLETED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderInfo"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/order/{orderId}": {
      "get": {
        "tags": [
          "Trading"
        ],
        "summary": "Logical order",
        "description": "Returns a user's logical order.",
        "operationId": "status",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Trading"
        ],
        "summary": "Delete",
        "description": "Remove user's logical order.",
        "operationId": "cancelOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/strategies": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "List of Strategies",
        "description": "Returns a list of all public Strategies.",
        "operationId": "strategyList",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Strategy"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/strategies/{ticker}": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Strategy details",
        "description": "Returns information about one specific strategy.",
        "operationId": "info",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "description": "Ticker of structure",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "BLX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Strategy"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/strategies/{ticker}/balance": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Balance",
        "description": "Endpoint requires manager authentication with institutional role. Returns live balances underlying assets of strategy.",
        "operationId": "daaBalance",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrategyBalance"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/strategies/{ticker}/price": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Current ticker",
        "description": "Returns the current ticker of the Strategy. The price is refreshed every minute.",
        "operationId": "daaPrice",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ],
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticker"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/strategies/{ticker}/pricehistory": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Historical information",
        "description": "The price history returns data points for the given period. Different granulation of\ndata can be returned based on the length of the period provided from daily to 5 minute (one \nprice point per period).\n\nFrom and to are optional parameters (both are either suplied or neither is supplied). If from/to are not supplied a default of last month is returned\nwith hourly granulation.",
        "operationId": "charts",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ],
              "default": "USD"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "granulation",
            "in": "query",
            "description": "Granulation for price points. See granulation enumeration section for more details.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "TWO_MINUTE",
                "FIVE_MINUTE",
                "FIFTEEN_MINUTE",
                "HOURLY",
                "THREE_HOURLY",
                "EIGHT_HOURLY",
                "DAILY"
              ]
            },
            "example": "HOURLY"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/strategies/{ticker}/statistics": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Statistics",
        "description": "Returns statistics of the strategy; returns, max drawdown and volatility for strategy.",
        "operationId": "getStatistics",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ],
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Statistics"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/strategies/{ticker}/structure": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Structure",
        "description": "Returns the current structure of a strategy. The same result entity is returned \nfor both PASSIVE and ACTIVE type DAAs, but for ACTIVE DAAs rebalancedWeight \nand targetWeight are always set to 0.",
        "operationId": "structure",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ],
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Structure"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Strategies"
        ],
        "summary": "Structure",
        "description": "Endpoint requires authentication. Creates and submits a new structure for a given strategy. \n\nResponse is the same object as GET to /v1/strategies/{ticker}/structure.",
        "operationId": "submitStructure",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StructureSubmit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Structure"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "ApiTimestamp": []
          },
          {
            "ApiSign": []
          }
        ]
      }
    },
    "/v1/strategies/{ticker}/structure/info": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Structure info",
        "description": "Returns the current structure info of a strategy. It contains data about new structure progress after submitting new structure.",
        "operationId": "fittingInfo",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FittingInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/activity": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Activity",
        "description": "Endpoint returns user's activity (buy, sell, deposit, withdraw).",
        "operationId": "getActivities",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "MY_ACTIVITIES",
                "FEES_AND_EARNINGS"
              ],
              "default": "MY_ACTIVITIES"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/balance": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "User Balance",
        "description": "Endpoint requires authentication. Returns the balance based on the authentication of the user. \n\nThere is an optional query parameter currency that changes the resulting fiat value calculation to chosen currency. Possibly values are EUR or USD.\n\n##### Request\n\nEmpty body.\n\n##### Response\n\n| Parameter  | Description   | Sample  |\n|---|---|---|\n| **currency** <br> *String*        |   Currency in which the values are returned | USD  |\n| **daaList** <br> *BalanceEntry*     | Array of portfolios balances   |   |\n| **assetList** <br> *BalanceEntry*     | Array of cryptocurrency balances  |   |\n\nBalanceEntry is of the following structure:\n\n| Parameter  | Description   | Sample  |\n| ---|---|---|\n| **name** <br> _String_ | Name of asset | Blockchain index  |\n| **ticker** <br> _String_  | Ticker of asset  | BLX  |\n| **balance** <br> _String_  | Balance of the asset  | 1337  |\n| **value** <br> _String_  | Value in USD or EUR (depending on the optional currency in query string)  | 4700  |",
        "operationId": "getUserBalance",
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BTC",
                "USD",
                "EUR"
              ],
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Balance"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/deposit/{currency}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Deposit",
        "description": "Endpoint returns user's crypto address.",
        "operationId": "getDepositAddress",
        "parameters": [
          {
            "name": "currency",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deposit"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/transaction/{transactionId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Transaction",
        "description": "Endpoint returns details about user's transaction.",
        "operationId": "transactionInfo",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/withdraw": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Withdraw",
        "description": "Endpoint allows to make withdraw asset from user's account to recipient's address. Recipient's address must be whitelisted at ICONOMI platform.",
        "operationId": "withdraw",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Withdraw"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "StructureSubmit": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitStructureElement"
            }
          },
          "speedType": {
            "type": "string",
            "enum": [
              "SLOW",
              "MEDIUM",
              "FAST"
            ]
          }
        }
      },
      "SubmitStructureElement": {
        "type": "object",
        "properties": {
          "assetTicker": {
            "type": "string"
          },
          "rebalancedWeight": {
            "type": "number"
          }
        }
      },
      "Structure": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StructureElement"
            }
          },
          "numberOfAssets": {
            "type": "integer",
            "format": "int32"
          },
          "lastRebalanced": {
            "type": "integer",
            "format": "int64"
          },
          "monthlyRebalancedCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "StructureElement": {
        "type": "object",
        "properties": {
          "rebalancedWeight": {
            "type": "number"
          },
          "targetWeight": {
            "type": "number"
          },
          "assetTicker": {
            "type": "string"
          },
          "assetName": {
            "type": "string"
          },
          "assetCategory": {
            "type": "string"
          },
          "estimatedProfit": {
            "type": "number"
          }
        }
      },
      "Withdraw": {
        "required": [
          "address",
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        }
      },
      "Transaction": {
        "required": [
          "amount_ticker",
          "fee_ticker",
          "performance_fee_ticker",
          "profit_ticker",
          "source_ticker",
          "target_ticker",
          "vat_ticker"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "exchangeRate": {
            "type": "number"
          },
          "paymentMethod": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "amount_ticker": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "source_ticker": {
            "type": "string"
          },
          "source_amount": {
            "type": "number"
          },
          "target_ticker": {
            "type": "string"
          },
          "target_amount": {
            "type": "number"
          },
          "fee_ticker": {
            "type": "string"
          },
          "fee_amount": {
            "type": "number"
          },
          "vat_ticker": {
            "type": "string"
          },
          "vat_amount": {
            "type": "number"
          },
          "performance_fee_ticker": {
            "type": "string"
          },
          "performance_fee_amount": {
            "type": "number"
          },
          "profit_ticker": {
            "type": "string"
          },
          "profit_amount": {
            "type": "number"
          }
        }
      },
      "TradeConfirm": {
        "type": "object",
        "properties": {
          "offerId": {
            "type": "string"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          }
        }
      },
      "OrderOffer": {
        "required": [
          "amount",
          "side",
          "source_ticker",
          "target_ticker"
        ],
        "type": "object",
        "properties": {
          "source_ticker": {
            "type": "string"
          },
          "target_ticker": {
            "type": "string"
          },
          "amount": {
            "minimum": 0,
            "type": "number"
          },
          "side": {
            "type": "string",
            "enum": [
              "source",
              "target"
            ]
          }
        }
      },
      "TradeOffer": {
        "type": "object",
        "properties": {
          "offerId": {
            "type": "string"
          },
          "sourceTicker": {
            "type": "string"
          },
          "targetTicker": {
            "type": "string"
          },
          "sourceAmount": {
            "type": "number"
          },
          "targetAmount": {
            "type": "number"
          },
          "exchangeRate": {
            "type": "number"
          },
          "feeAmount": {
            "type": "number"
          },
          "feeTicker": {
            "type": "string"
          },
          "sellingAssets": {
            "type": "boolean"
          },
          "validTo": {
            "type": "integer",
            "format": "int64"
          },
          "serverTime": {
            "type": "integer",
            "format": "int64"
          },
          "error": {
            "type": "string"
          },
          "used": {
            "type": "boolean"
          }
        }
      },
      "Order": {
        "required": [
          "amount",
          "source_ticker",
          "target_ticker"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0,
            "type": "number"
          },
          "source_ticker": {
            "type": "string"
          },
          "target_ticker": {
            "type": "string"
          },
          "fitting_speed_type": {
            "type": "string",
            "enum": [
              "SLOW",
              "MEDIUM",
              "FAST"
            ]
          }
        }
      },
      "OrderInfo": {
        "required": [
          "source_amount",
          "source_ticker",
          "target_ticker"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "created",
              "active",
              "done",
              "failed",
              "unknown"
            ]
          },
          "percentageCompleted": {
            "type": "number"
          },
          "source_amount": {
            "minimum": 0,
            "type": "number"
          },
          "source_ticker": {
            "type": "string"
          },
          "target_amount": {
            "type": "number"
          },
          "target_ticker": {
            "type": "string"
          }
        }
      },
      "FittingInfo": {
        "type": "object",
        "properties": {
          "rebalanceCompleted": {
            "type": "boolean"
          },
          "percentFitted": {
            "type": "number"
          },
          "fittedPerAsset": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          }
        }
      },
      "Statistics": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "returns": {
            "type": "object",
            "properties": {
              "DAY": {
                "type": "number"
              },
              "WEEK": {
                "type": "number"
              },
              "MONTH": {
                "type": "number"
              },
              "THREE_MONTH": {
                "type": "number"
              },
              "SIX_MONTH": {
                "type": "number"
              },
              "YTD": {
                "type": "number"
              },
              "YEAR": {
                "type": "number"
              },
              "ALL_TIME": {
                "type": "number"
              }
            }
          },
          "volatility": {
            "type": "object",
            "properties": {
              "DAY": {
                "type": "number"
              },
              "WEEK": {
                "type": "number"
              },
              "MONTH": {
                "type": "number"
              },
              "THREE_MONTH": {
                "type": "number"
              },
              "SIX_MONTH": {
                "type": "number"
              },
              "YTD": {
                "type": "number"
              },
              "YEAR": {
                "type": "number"
              },
              "ALL_TIME": {
                "type": "number"
              }
            }
          },
          "maxDrawdown": {
            "type": "object",
            "properties": {
              "DAY": {
                "type": "number"
              },
              "WEEK": {
                "type": "number"
              },
              "MONTH": {
                "type": "number"
              },
              "THREE_MONTH": {
                "type": "number"
              },
              "SIX_MONTH": {
                "type": "number"
              },
              "YTD": {
                "type": "number"
              },
              "YEAR": {
                "type": "number"
              },
              "ALL_TIME": {
                "type": "number"
              }
            }
          }
        }
      },
      "Chart": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "BTC",
              "USD",
              "EUR"
            ]
          },
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "granulation": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartPoint"
            }
          }
        }
      },
      "ChartPoint": {
        "type": "object",
        "properties": {
          "x": {
            "type": "integer",
            "format": "int64"
          },
          "y": {
            "type": "string"
          }
        }
      },
      "Ticker": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "change24h": {
            "type": "number"
          },
          "change7d": {
            "type": "number"
          },
          "change1m": {
            "type": "number"
          },
          "change3m": {
            "type": "number"
          },
          "change6m": {
            "type": "number"
          },
          "change12m": {
            "type": "number"
          },
          "changeAll": {
            "type": "number"
          },
          "aum": {
            "type": "number"
          }
        }
      },
      "StrategyBalance": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StrategyBalanceElement"
            }
          }
        }
      },
      "StrategyBalanceElement": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          }
        }
      },
      "Strategy": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "manager": {
            "type": "string"
          },
          "managementType": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PASSIVE"
            ]
          },
          "managementFee": {
            "type": "number"
          },
          "performanceFee": {
            "type": "number"
          },
          "performanceFeeCollectionPeriod": {
            "type": "string"
          },
          "entryFee": {
            "type": "number"
          },
          "exitFee": {
            "type": "number"
          },
          "followers": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Deposit": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        }
      },
      "Balance": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "daaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BalanceEntry"
            }
          },
          "assetList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BalanceEntry"
            }
          }
        }
      },
      "BalanceEntry": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "ticker": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Activity": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "AssetInfo": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Asset": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string"
          },
          "supported": {
            "type": "boolean"
          },
          "useInStrategy": {
            "type": "boolean"
          },
          "tradable": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "ONLINE",
              "OFFLINE",
              "DELISTING",
              "DELISTED",
              "MAINTENANCE"
            ]
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "name": "ICN-API-KEY",
        "in": "header"
      },
      "ApiSign": {
        "type": "apiKey",
        "name": "ICN-SIGN",
        "in": "header"
      },
      "ApiTimestamp": {
        "type": "apiKey",
        "name": "ICN-TIMESTAMP",
        "in": "header"
      }
    }
  }
}
