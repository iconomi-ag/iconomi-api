openapi: 3.0.1
info:
  title: Iconomi API!
  description: |-
    # Introduction
    Welcome to the ICONOMI Platform API. There are two ways to integrate with the ICONOMI platform, the REST API and a stream-oriented API using Websockets.

    ## Versioning

    This API maintains backward compatibility. Breaking changes to the API are managed by providing new endpoints. Old versions will remain available for two months after a new version is released and can then be removed at any time. All information about releases is published on this website.
    Non-breaking changes are released in the same major-version API.

    ## Types

    All request bodies should have content type application/json and be valid JSON.

    <br/>

    ### Timestamps

    Unless otherwise specified, all timestamps will be returned in ISO 8601 with microseconds.

    <br/> Example:

    ```
    2019-08-01T01:02:03.000004Z
    ```

    <br/>

    ### Numbers

    Integers are unquoted.

    <br/> Example:

    ```
    "x": 194767
    ```

    Decimals are returned as strings with a period as a decimal separator and no thousands separator.

    <br/> Example:

    ```
    "price": "3.3847"
    ```

    <br/>

    ### IDs

    All IDs are UUIDs.

    <br/> Example:

    ``` 
    6EFB3D83-830A-42F8-84CD-2C307FE62AD8
    ```

    <br/>

    ### Enumerations

    There are several enumerations on the platform that are used across the platform.

    #### Strategy types
    There are different types of strategies supported on the platform which use different behaviour for 
    investment:

    * **PASSIVE** - Strategies that have structures based set on percentages and are rebalances less often

    * **ACTIVE** - Strategies that follow a more active strategy not using an index

    #### Granulations

    Depending on the time period selected different granulation of data is possible as a result. 
    For each of the granulations there will be one data point available:

    * **TWO_MINUTE** - only available for institutional strategies.
    * **FIVE_MINUTE**
    * **HOURLY**
    * **THREE_HOURLY**
    * **EIGHT_HOURLY**
    * **DAILY**

    ## Rate limiting

    The public API (both the REST API and the Websocket API) allows for 60 requests per minute. This rate is subject to change.

    ## Authentication

    To access authenticated endpoints you need an account on the ICONOMI platform. After you have an account you need to setup your api
    keys (you can find the option under Settings).

    ### Creating a request

    All REST requests must contain the following headers:

    * **ICN-API-KEY** - The api key as a string.
    * **ICN-SIGN** - The base64-encoded signature (see Signing a Message).
    * **ICN-TIMESTAMP** - A timestamp for your request in epoch milliseconds.

    <br/>
     
    ### Signing a Message

    You generate the **ICN-SIGN** header by creating a **sha512 HMAC** using the base64-decoded secret key on the prehash string timestamp + method + requestPath + body (where + represents string concatenation) and base64-encode the output, where:
    * the timestamp value is the same as the **ICN-TIMESTAMP** header.
    * the body is the request body string or omitted if there is no request body (typically for GET requests). 
    * method must always be in upper case
    * the request path starts with /v1/ and doesn't include query parameters


    Pseudocode example:
    ``` 
    base64_encode(HMAC_SHA512(secret_key, timestamp + upper_case(method) + requestPath + body))
    ```

    Java code example:
    ```
    String apiSecret = "...";
    String toSign = timestamp + method.toUpperCase() + requestPath + body;
    SecretKeySpec signingKey = new SecretKeySpec(apiSecret.getBytes(), "HmacSHA512");
    Mac mac = Mac.getInstance(signingKey.getAlgorithm());
    mac.init(signingKey);
    String digest = Base64.getEncoder().encodeToString(mac.doFinal(toSign.getBytes()));
    ```

    Example of a POST with a body:
    ```
    secret = '51ffd0604d4ba42790b42860fc1e98ac6a4b60e32e078b801d899c6eb04bc29e'
    timestamp = '1643118174153'
    method = 'post'
    requestPath = '/v1/order'
    body = '{"amount":100,"source_ticker":"EUR","target_ticker":"BTC","fitting_speed_type":"FAST"}'

    string to encode = '1643118174153POST/v1/order{"amount":100,"source_ticker":"EUR","target_ticker":"BTC","fitting_speed_type":"FAST"}'

    base64 encoded signature = 'tD9pi/UhcVp8BeQyahBDRQnkIm0avWmE1JMZlCEveZ66whMZ0YsHWfzFz6G14FhRunPR/rFbbFZuRkOLXEIoEA=='
    ```
    Example of GET with query parameters:
    ```
    secret = '51ffd0604d4ba42790b42860fc1e98ac6a4b60e32e078b801d899c6eb04bc29e'
    timestamp = '1643178751655'
    method = 'get'
    requestPath = '/v1/user/activity?type=FEES_AND_EARNINGS&pageSize=4&pageNumber=0'
    body = <empty>

    string to encode = '1643178751655GET/v1/user/activity'

    base64 encoded signature = 'efIB1zs7yunvzvCUL1SPWh5IAjU2b+g51vSPdGSX69KjJIVbtJQKIc2yVTaZlQIoReu6hx39r4w9dTDJhRdgdA=='
    ```


    <br/>

    ### Postman

    You can also try with <a href="https://www.postman.com/downloads/" target="_blank" rel="nofollow">postman client</a>. After you import <a href="https://static.iconomi.com/api/postman_collection.json" target="_blank" rel="nofollow">collection</a> into client, you have to create new environment under "Manage environments" and add two variables:

    <br>

    * **ICN-API-KEY** - The api key from your account on ICONOMI platform
    * **ICN-SECRET** - The secret key from your account on ICONOMI platform

    <br/>

    Before you execute any of those endpoints, environment must be selected.

    ### Websocket Authentication

    It is possible to authenticate yourself when subscribing to the websocket feed.

    When opening connection to websocket, add additional headers, as if you were signing a request. To get the necessary parameters, you would go through the same process as you do to make authenticated calls to the API.

    ## Sample libraries
    You can find sample libraries for communicating with our API at our <a href="https://github.com/iconomi-ag" target="_blank" rel="nofollow">github page.</a>

    ## Bug reports
    For any bug reports in the documentation or the API, feel free to report them to our <a href="https://github.com/iconomi-ag/iconomi-api" target="_blank" rel="nofollow">github page.</a>
  version: '1.3'
servers:
  - url: 'https://api.iconomi.com'
    description: Live Server!
tags:
  - name: Asset
    description: Asset endpoint
  - name: Strategies
    description: 'Strategies, previously called DAAs'
  - name: Trading
    description: Orders and trading
  - name: User
    description: User data
  - name: WebSocket Feed
    description: |-
      Using the WebSocket feed you can get close to real-time data on different events that take place on the ICONOMI platform.
      To start receiving feed messages, first send a subscribe message indicating which channels you want to subscribe to.
      All requests follow this following format

      | Parameter  | Description   | Sample  |
      |---|---|---|
      | **type** <br> *String*        |   Always provide the value "subscribe"      |    subscribe    |
      | **channel** <br> *String*     |     The channel to which you are subscribing    |     daa/price   |
      |  <br> *Channel-specific*     |     Optional additional data specific  |       |

      ### Strategy price feed

      You can subscribe to a price feed of strategy prices. The latest prices are sent every minute.

      Channel-specific data:

      | Parameter  | Description   | Sample  |
      |---|---|---|
      | **ticker** <br> *String*        |   Ticker of the strategy to receive the price feed for     |    BLX    |

      ##### Subscription request

      Example:

      ```
      {
          "type":"subscribe",
          "channel": "daa/price",
          "ticker": "BLX"
      }
      ```

      ##### Feed message

      Example:

      ```
       {
          "type":"price",
          "price":
          {
             "ticker":"BLX",
             "currency":"USD",
             "price":"1.36"
          }
       }
      ```
  - name: WebSocket RPC
    description: |-
      The WebSocket RPC is publicly available, but connections to it are rate-limited to 1 request per 4 seconds per IP.
      The WebSocket API is available at `wss://api.iconomi.com/v1/ws`. The current version is v1.

      Requests and responses are application/json content type.  The general message format used for both requests and responses is a structure with message type as the first attribute,  followed by the objects of the request/response.

      Example request:

      ```
      {
        "type": "daa",
        "ticker" : "BLX"
      }
      ```

      ### Strategy list

      Returns a list of all public DAAs.

      ##### Request

      Example:

      ```
      {
          "type": "daalist"
      }
      ```

      ##### Response

      Result is an array of the following entities:

      | Parameter  | Description   | Sample  |
      |---|---|---|
      | **name** <br> *String*        |   Name of strategy      |    Blockchain Index    |
      | **manager** <br> *String*     |     Manager of strategy     |     Columbus Capital   |
      | **ticker** <br> *String*     |     Strategy ticker      |     BLX   |
      | **type** <br> *String*     |     Type of strategy. See strategy types under enumerations section for possible options.      |     PASSIVE   |

      Example:

      ```
      {
          "type":"daalist",
          "daalist":
          [
              {
                  "name":"Blockchain Index",
                  "manager":"Columbus Capital",
                  "ticker":"BLX",
                  "type":"PASSIVE"
              },
              {
                  "name":"Pinta",
                  "manager":"Columbus Capital",
                  "ticker":"CCP",
                  "type":"ACTIVE"
              }
          ]
      }
      ```

      ### Strategy details

      Returns details of a specific strategy.

      ##### Request

      Example:

      ```
      {
          "type": "daa",
          "ticker": "BLX"
      }
      ```

      ##### Response

      The result is an array of the following entities:

      | Parameter  | Description   | Sample  |
      |---|---|---|
      | **name** <br> *String*        |   Name of strategy      |    Blockchain Index    |
      | **manager** <br> *String*     |     Manager of strategy     |     Columbus Capital   |
      | **ticker** <br> *String*     |     Strategy ticker      |     BLX   |
      | **type** <br> *String*     |     Type of strategy. See strategy types under enumerations section for possible options.      |     PASSIVE   |

      Example:

      ```
      {
          "type":"daa",
          "name":"Blockchain Index",
          "manager":"Columbus Capital",
          "ticker":"BLX",
          "type":"PASSIVE"
      }
      ```

      ### User balance

      Returns user balance based on authentication.

      ##### Request

      Example:

      Empty body.

      ##### Response

       | Parameter  | Description   | Sample  |
      |---|---|---|
      | **currency** <br> *String*        |   Currency in which the values are returned | USD  |
      | **daaList** <br> *BalanceEntry*     | Array of portfolios balances   |   |
      | **assetList** <br> *BalanceEntry*     | Array of cryptocurrency balances  |   |

      BalanceEntry is of the following structure:

      | Parameter  | Description   | Sample  |
      |---|---|---|
      | **name** <br> *String*        |   Name of asset | Blockchain index  |
      | **ticker** <br> *String*     | Ticker of asset  | BLX  |
      | **balance** <br> *String*     | Balance of the asset  | 1337  |
      | **value** <br> *String*     | Value in USD or EUR (depending on the optional currency in query string)  | 4700  |

      Example:
      ```
      {
        "currency": "USD",
        "daaList": [
          {
            "name": "Blockchain Index",
            "ticker": "BLX",
            "balance": "1337",
            "value": "4700"
          }
        ],
        "assetList": [
          {
            "name": "Bitcoin",
            "ticker": "BTC",
            "balance": "1",
            "value": "29998"
          }
        ]
      }
      ```
paths:
  /v1/assets:
    get:
      tags:
        - Asset
      summary: List of Assets
      description: Returns a list of all assets on platform.
      operationId: assetList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  '/v1/assets/{ticker}':
    get:
      tags:
        - Asset
      summary: Asset details
      description: Returns information about one specific Asset.
      operationId: assetDetails
      parameters:
        - name: ticker
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetInfo'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  '/v1/assets/{ticker}/price':
    get:
      tags:
        - Asset
      summary: Current ticker
      description: Returns the current ticker of the Asset. The price is refreshed every minute.
      operationId: assetTicker
      parameters:
        - name: ticker
          in: path
          required: true
          schema:
            type: string
        - name: currency
          in: query
          required: false
          schema:
            type: string
            default: USD
            enum:
              - BTC
              - USD
              - EUR
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticker'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  '/v1/assets/{ticker}/pricehistory':
    get:
      tags:
        - Asset
      summary: Historical information
      description: |-
        The price history returns data points for the given period. Different granulation of
        data can be returned based on the length of the period provided from daily to 5 minute (one 
        price point per period).

        From and to are optional parameters (both are either supplied or neither is supplied). If from/to are not supplied a default of last month is returned
        with hourly granulation.
      operationId: assetPriceHistory
      parameters:
        - name: ticker
          in: path
          required: true
          schema:
            type: string
        - name: currency
          in: query
          required: false
          schema:
            type: string
            default: USD
            enum:
              - BTC
              - USD
              - EUR
        - name: from
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: to
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: granulation
          in: query
          required: false
          schema:
            type: string
            enum:
              - TWO_MINUTE
              - FIVE_MINUTE
              - FIFTEEN_MINUTE
              - HOURLY
              - THREE_HOURLY
              - EIGHT_HOURLY
              - DAILY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chart'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  '/v1/assets/{ticker}/statistics':
    get:
      tags:
        - Asset
      summary: Statistics
      description: 'Returns statistics of the strategy; returns, max drawdown and volatility for strategy.'
      operationId: assetStatistics
      parameters:
        - name: ticker
          in: path
          required: true
          schema:
            type: string
        - name: currency
          in: query
          required: false
          schema:
            type: string
            default: USD
            enum:
              - BTC
              - USD
              - EUR
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistics'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  /v1/order:
    post:
      tags:
        - Trading
      summary: Place order
      description: Placing user's logical order.
      operationId: orderTrade
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderInfo'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  /v1/order/offer:
    post:
      tags:
        - Trading
      summary: Trade offer
      description: Generating trade offer.
      operationId: orderOffer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderOffer'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeOffer'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  '/v1/order/offer/{offerId}/confirm':
    post:
      tags:
        - Trading
      summary: Confirm trade offer
      description: This endpoint confirms generated trade offer.
      operationId: confirmOffer
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeConfirm'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  /v1/order/orders:
    get:
      tags:
        - Trading
      summary: List of orders
      description: Returns a list of all user's logical orders.
      operationId: getAllOrders
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - PREPARING
              - IN_PROGRESS
              - CANCELLING
              - CANCELLED
              - COMPLETED
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: pageNumber
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderInfo'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  '/v1/order/{orderId}':
    get:
      tags:
        - Trading
      summary: Logical order
      description: Returns a user's logical order.
      operationId: status
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderInfo'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
        - Trading
      summary: Delete
      description: Remove user's logical order.
      operationId: cancelOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderInfo'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  /v1/strategies:
    get:
      tags:
        - Strategies
      summary: List of Strategies
      description: Returns a list of all public Strategies.
      operationId: strategyList
      parameters:
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1000
        - name: pageNumber
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Strategy'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  '/v1/strategies/{ticker}':
    get:
      tags:
        - Strategies
      summary: Strategy details
      description: Returns information about one specific strategy.
      operationId: details
      parameters:
        - name: ticker
          in: path
          description: Ticker of structure
          required: true
          schema:
            type: string
          example: BLX
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Strategy'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  '/v1/strategies/{ticker}/post':
    post:
      tags:
        - Strategies
      summary: Create post
      description: Endpoint requires authentication. Submits a new post to the strategy.
      operationId: createPost
      parameters:
        - name: ticker
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitPost'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
      security:
        - ApiKey: []
        - ApiTimestamp: []
        - ApiSign: []
  '/v1/strategies/{ticker}/post/{id}':
    post:
      tags:
        - Strategies
      summary: Update post
      description: Endpoint requires authentication. Updates a post on the strategy.
      operationId: updatePost
      parameters:
        - name: ticker
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePost'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
      security:
        - ApiKey: []
        - ApiTimestamp: []
        - ApiSign: []
  '/v1/strategies/{ticker}/posts':
    get:
      tags:
        - Strategies
      summary: Strategy posts
      description: Returns a list of posts.
      operationId: posts
      parameters:
        - name: ticker
          in: path
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: pageNumber
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  '/v1/strategies/{ticker}/price':
    get:
      tags:
        - Strategies
      summary: Current ticker
      description: Returns the current ticker of the Strategy. The price is refreshed every minute.
      operationId: daaPrice
      parameters:
        - name: ticker
          in: path
          required: true
          schema:
            type: string
        - name: currency
          in: query
          required: false
          schema:
            type: string
            default: USD
            enum:
              - BTC
              - USD
              - EUR
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticker'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  '/v1/strategies/{ticker}/pricehistory':
    get:
      tags:
        - Strategies
      summary: Historical information
      description: |-
        The price history returns data points for the given period. Different granulation of
        data can be returned based on the length of the period provided from daily to 5 minute (one 
        price point per period).

        From and to are optional parameters (both are either suplied or neither is supplied). If from/to are not supplied a default of last month is returned
        with hourly granulation.
      operationId: priceHistory
      parameters:
        - name: ticker
          in: path
          required: true
          schema:
            type: string
        - name: currency
          in: query
          required: false
          schema:
            type: string
            default: USD
            enum:
              - BTC
              - USD
              - EUR
        - name: from
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: to
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: granulation
          in: query
          description: Granulation for price points. See granulation enumeration section for more details.
          required: false
          schema:
            type: string
            enum:
              - TWO_MINUTE
              - FIVE_MINUTE
              - FIFTEEN_MINUTE
              - HOURLY
              - THREE_HOURLY
              - EIGHT_HOURLY
              - DAILY
          example: HOURLY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chart'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  '/v1/strategies/{ticker}/statistics':
    get:
      tags:
        - Strategies
      summary: Statistics
      description: 'Returns statistics of the strategy; returns, max drawdown and volatility for strategy.'
      operationId: getStatistics
      parameters:
        - name: ticker
          in: path
          required: true
          schema:
            type: string
        - name: currency
          in: query
          required: false
          schema:
            type: string
            default: USD
            enum:
              - BTC
              - USD
              - EUR
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistics'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  '/v1/strategies/{ticker}/structure':
    get:
      tags:
        - Strategies
      summary: Structure
      description: |-
        Returns the current structure of a strategy. The same result entity is returned 
        for both PASSIVE and ACTIVE type DAAs, but for ACTIVE DAAs rebalancedWeight 
        and targetWeight are always set to 0.
      operationId: structure
      parameters:
        - name: ticker
          in: path
          required: true
          schema:
            type: string
        - name: currency
          in: query
          required: false
          schema:
            type: string
            default: USD
            enum:
              - BTC
              - USD
              - EUR
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Structure'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
    post:
      tags:
        - Strategies
      summary: Structure
      description: |-
        Endpoint requires authentication. Creates and submits a new structure for a given strategy. 

        Response is the same object as GET to /v1/strategies/{ticker}/structure.
      operationId: submitStructure
      parameters:
        - name: ticker
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructureSubmit'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Structure'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
      security:
        - ApiKey: []
        - ApiTimestamp: []
        - ApiSign: []
  '/v1/strategies/{ticker}/structure/info':
    get:
      tags:
        - Strategies
      summary: Structure info
      description: Returns the current structure info of a strategy. It contains data about new structure progress after submitting new structure.
      operationId: fittingInfo
      parameters:
        - name: ticker
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FittingInfo'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  /v1/user/activity:
    get:
      tags:
        - User
      summary: Activity
      description: 'Endpoint returns user''s activity (buy, sell, deposit, withdraw).'
      operationId: getActivities
      parameters:
        - name: type
          in: query
          required: false
          schema:
            type: string
            default: MY_ACTIVITIES
            enum:
              - MY_ACTIVITIES
              - FEES_AND_EARNINGS
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
        - name: pageNumber
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  /v1/user/balance:
    get:
      tags:
        - User
      summary: User Balance
      description: |-
        Endpoint requires authentication. Returns the balance based on the authentication of the user. 

        There is an optional query parameter currency that changes the resulting fiat value calculation to chosen currency. Possibly values are EUR or USD.

        ##### Request

        Empty body.

        ##### Response

        | Parameter  | Description   | Sample  |
        |---|---|---|
        | **currency** <br> *String*        |   Currency in which the values are returned | USD  |
        | **daaList** <br> *BalanceEntry*     | Array of portfolios balances   |   |
        | **assetList** <br> *BalanceEntry*     | Array of cryptocurrency balances  |   |

        BalanceEntry is of the following structure:

        | Parameter  | Description   | Sample  |
        | ---|---|---|
        | **name** <br> _String_ | Name of asset | Blockchain index  |
        | **ticker** <br> _String_  | Ticker of asset  | BLX  |
        | **balance** <br> _String_  | Balance of the asset  | 1337  |
        | **value** <br> _String_  | Value in USD or EUR (depending on the optional currency in query string)  | 4700  |
      operationId: getUserBalance
      parameters:
        - name: currency
          in: query
          required: false
          schema:
            type: string
            default: USD
            enum:
              - BTC
              - USD
              - EUR
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  '/v1/user/deposit/{currency}':
    get:
      tags:
        - User
      summary: Deposit
      description: Endpoint returns user's crypto address.
      operationId: getDepositAddress
      parameters:
        - name: currency
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deposit'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  /v1/user/portfoliohistory:
    post:
      tags:
        - User
      summary: Portfolio value history
      description: Get the history of the value of the users portfolio.
      operationId: portfolioHistory
      parameters:
        - name: currency
          in: query
          required: false
          schema:
            type: string
            default: USD
            enum:
              - BTC
              - USD
              - EUR
        - name: period
          in: query
          required: false
          schema:
            type: string
            default: ONE_WEEK
            enum:
              - ONE_DAY
              - ONE_WEEK
              - ONE_MONTH
              - THREE_MONTHS
              - SIX_MONTHS
              - ONE_YEAR
              - ALL_TIME
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioHistory'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  '/v1/user/transaction/{transactionId}':
    get:
      tags:
        - User
      summary: Transaction
      description: Endpoint returns details about user's transaction.
      operationId: transactionInfo
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
  /v1/user/withdraw:
    post:
      tags:
        - User
      summary: Withdraw
      description: Endpoint allows to make withdraw asset from user's account to recipient's address. Recipient's address must be whitelisted at ICONOMI platform.
      operationId: withdraw
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Withdraw'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    StructureSubmit:
      type: object
      properties:
        ticker:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/SubmitStructureElement'
        speedType:
          type: string
          example: FAST
          enum:
            - SLOW
            - MEDIUM
            - FAST
    SubmitStructureElement:
      type: object
      properties:
        assetTicker:
          type: string
        rebalancedWeight:
          type: number
          description: Weight of the asset in structure. The value is provided as a percentage in decimal format (e.g. 0.5 means 50%). For ACTIVE DAAs this is always 0.
          example: 0.5
    Structure:
      type: object
      properties:
        ticker:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/StructureElement'
        numberOfAssets:
          type: integer
          format: int32
        lastRebalanced:
          type: integer
          format: int64
        monthlyRebalancedCount:
          type: integer
          format: int64
    StructureElement:
      type: object
      properties:
        rebalancedWeight:
          type: number
          description: Weight of the asset that was last set at rebalancing time. The value is provided as a percentage in decimal format (e.g. 0.5 means 50%). For ACTIVE DAAs this is always 0.
          example: 0.5
        targetWeight:
          type: number
          description: 'Currently targeted weight of the asset for the DAA. Because of the price change of the asset, the target weight moves up or down. This is the percentage the DAA is targeting to hold at the current time. For ACTIVE DAAs this is always'
          example: 0.613
        assetTicker:
          type: string
          description: Ticker of the asset
          example: ETH
        assetName:
          type: string
        assetCategory:
          type: string
        estimatedProfit:
          type: number
    UpdatePost:
      required:
        - content
      type: object
      properties:
        postToFollowerFunds:
          type: boolean
          description: Whether to also submit this post to follower funds
          example: false
        content:
          type: string
          description: 'The post. The content of the post uses a subset of html for formatting. Paragraphs (new lines) are created with the <p> tag <p/>, <strong> is for bold text, <em> is for italic, <u> is for underlines.'
          example: <p><strong>bold text!</strong></p><p><em>Italic text</em></p><p><u>underlined text!</u></p>
        giphyId:
          type: string
          description: Id of giphy image to add to the post. You can only send one of giphyId and image
          example: Z6f7vzq3iP6Mw
        image:
          type: string
          description: Base64 encoded image file to add to the post. You can only send one of giphyId and image.
        deleteImage:
          type: boolean
          description: Whether to delete the image in this post
          example: false
    Post:
      type: object
      properties:
        id:
          type: string
          description: The post uuid.
          example: b3fe79b3-9fed-4e91-a84e-22bd93354385
        ticker:
          type: string
          description: The ticker for the strategy.
          example: BLX
        content:
          type: string
          description: The post.
          example: BLX is awesome!
        timestamp:
          type: integer
          description: Epoch timestamp in milliseconds.
          format: int64
        strategyName:
          type: string
          description: The name of the strategy.
          example: BLX
        feedback:
          type: array
          description: Replies to this post
          items:
            $ref: '#/components/schemas/Post'
        giphyId:
          type: string
          description: Id of giphy image
        hasImage:
          type: boolean
          description: Whether this post has an image attached
    SubmitPost:
      required:
        - content
      type: object
      properties:
        postToFollowerFunds:
          type: boolean
          description: Whether to also submit this post to follower funds
          example: false
        content:
          type: string
          description: 'The post. The content of the post uses a subset of html for formatting. Paragraphs (new lines) are created with the <p> tag <p/>, <strong> is for bold text, <em> is for italic, <u> is for underlines.'
          example: <p><strong>bold text!</strong></p><p><em>Italic text</em></p><p><u>underlined text!</u></p>
        giphyId:
          type: string
          description: Id of giphy image to add to the post. You can only send one of giphyId and image
          example: Z6f7vzq3iP6Mw
        image:
          type: string
          description: Base64 encoded image file to add to the post. You can only send one of giphyId and image.
    Withdraw:
      required:
        - address
        - amount
        - currency
      type: object
      properties:
        amount:
          type: string
        currency:
          type: string
        address:
          type: string
    Transaction:
      required:
        - amount_ticker
        - fee_ticker
        - performance_fee_ticker
        - profit_ticker
        - source_ticker
        - target_ticker
        - vat_ticker
      type: object
      properties:
        transactionId:
          type: string
          description: Transaction uuid
          example: b3fe79b3-9fed-4e91-a84e-22bd93354385
        timestamp:
          type: integer
          format: int64
        status:
          type: string
        exchangeRate:
          type: number
        paymentMethod:
          type: string
        address:
          type: string
        type:
          type: string
        kind:
          type: string
        amount_ticker:
          type: string
        amount:
          type: number
        source_ticker:
          type: string
        source_amount:
          type: number
        target_ticker:
          type: string
        target_amount:
          type: number
        fee_ticker:
          type: string
        fee_amount:
          type: number
        vat_ticker:
          type: string
        vat_amount:
          type: number
        performance_fee_ticker:
          type: string
        performance_fee_amount:
          type: number
        profit_ticker:
          type: string
        profit_amount:
          type: number
    ChartPoint:
      type: object
      properties:
        x:
          type: integer
          description: Timestamp for the point in Epoch seconds format.
          format: int64
        'y':
          type: string
          description: Price at the time point. Up to 6 decimal places of precision is possible.
      description: Array of value point objects.
    PortfolioHistory:
      type: object
      properties:
        currency:
          type: string
          description: Ticker of the currency in which the values are returned.
          example: EUR
          enum:
            - BTC
            - USD
            - EUR
        period:
          type: string
          description: The timeframe this chart represents.
          example: ONE_WEEK
          enum:
            - ONE_DAY
            - ONE_WEEK
            - ONE_MONTH
            - THREE_MONTHS
            - SIX_MONTHS
            - ONE_YEAR
            - ALL_TIME
        values:
          type: array
          description: Array of value point objects.
          items:
            $ref: '#/components/schemas/ChartPoint'
    TradeConfirm:
      type: object
      properties:
        offerId:
          type: string
          description: Trade uuid
          example: b3fe79b3-9fed-4e91-a84e-22bd93354385
        transaction:
          $ref: '#/components/schemas/Transaction'
    OrderOffer:
      required:
        - amount
        - side
        - source_ticker
        - target_ticker
      type: object
      properties:
        source_ticker:
          type: string
        target_ticker:
          type: string
        amount:
          minimum: 0
          type: number
        side:
          type: string
          enum:
            - source
            - target
    TradeOffer:
      type: object
      properties:
        offerId:
          type: string
        sourceTicker:
          type: string
        targetTicker:
          type: string
        sourceAmount:
          type: number
        targetAmount:
          type: number
        exchangeRate:
          type: number
        feeAmount:
          type: number
        feeTicker:
          type: string
        sellingAssets:
          type: boolean
        validTo:
          type: integer
          format: int64
        serverTime:
          type: integer
          format: int64
        error:
          type: string
        used:
          type: boolean
    Order:
      required:
        - amount
        - source_ticker
        - target_ticker
      type: object
      properties:
        amount:
          minimum: 0
          type: number
        source_ticker:
          type: string
        target_ticker:
          type: string
        fitting_speed_type:
          type: string
          enum:
            - SLOW
            - MEDIUM
            - FAST
            - OTC
    OrderInfo:
      required:
        - source_amount
        - source_ticker
        - target_ticker
      type: object
      properties:
        id:
          type: string
          description: Order uuid
          example: b3fe79b3-9fed-4e91-a84e-22bd93354385
        status:
          type: string
          enum:
            - created
            - active
            - done
            - failed
            - unknown
        percentageCompleted:
          type: number
        source_amount:
          minimum: 0
          type: number
        source_ticker:
          type: string
        target_amount:
          type: number
        target_ticker:
          type: string
    FittingInfo:
      type: object
      properties:
        rebalanceCompleted:
          type: boolean
        percentFitted:
          type: number
        fittedPerAsset:
          type: object
          additionalProperties:
            type: number
    Statistics:
      type: object
      properties:
        ticker:
          type: string
          example: BLX
        currency:
          type: string
          example: USD
        returns:
          type: object
          properties:
            DAY:
              type: number
            WEEK:
              type: number
            MONTH:
              type: number
            THREE_MONTH:
              type: number
            SIX_MONTH:
              type: number
            YTD:
              type: number
            YEAR:
              type: number
            ALL_TIME:
              type: number
        volatility:
          type: object
          properties:
            DAY:
              type: number
            WEEK:
              type: number
            MONTH:
              type: number
            THREE_MONTH:
              type: number
            SIX_MONTH:
              type: number
            YTD:
              type: number
            YEAR:
              type: number
            ALL_TIME:
              type: number
        maxDrawdown:
          type: object
          properties:
            DAY:
              type: number
            WEEK:
              type: number
            MONTH:
              type: number
            THREE_MONTH:
              type: number
            SIX_MONTH:
              type: number
            YTD:
              type: number
            YEAR:
              type: number
            ALL_TIME:
              type: number
    Chart:
      type: object
      properties:
        ticker:
          type: string
        currency:
          type: string
          description: Ticker of the currency in which the prices are returned.
          example: EUR
          enum:
            - BTC
            - USD
            - EUR
        from:
          type: integer
          description: Timestamp for when the chart information starts in *Epoch* seconds format.
          format: int64
        to:
          type: integer
          description: Timestamp for when the chart information ends in *Epoch* seconds format.
          format: int64
        granulation:
          type: string
          description: Granulation for price points. See granulation enumeration section for more details.
          example: HOURLY
        values:
          type: array
          description: Array of price point objects.
          items:
            $ref: '#/components/schemas/ChartPoint'
    Ticker:
      type: object
      properties:
        ticker:
          type: string
          description: The current price of the DAA in the quoted currency. Up to 6 decimal places of precision is possible.
          example: BLX
        currency:
          type: string
          description: Ticker of the currency that the price is quoted in
          example: USD
        price:
          type: number
        change24h:
          type: number
        change7d:
          type: number
        change1m:
          type: number
        change3m:
          type: number
        change6m:
          type: number
        change12m:
          type: number
        changeAll:
          type: number
        aum:
          type: number
    Posts:
      type: object
      properties:
        ticker:
          type: string
          description: The ticker for the strategy.
          example: BLX
        posts:
          type: array
          description: A list of posts.
          items:
            $ref: '#/components/schemas/Post'
        pageSize:
          type: integer
          description: Page size.
          format: int32
          example: 10
        pageNumber:
          type: integer
          description: Page number.
          format: int32
          example: 0
        pageCount:
          type: integer
          description: Page count.
          format: int32
          example: 3
        totalCount:
          type: integer
          description: Total element count.
          format: int32
          example: 3
    Strategy:
      type: object
      properties:
        ticker:
          type: string
          description: Ticker
          example: BLX
        name:
          type: string
          example: Blockchain Index
        manager:
          type: string
          description: Manager of DAA
          example: John Doe
        managementType:
          type: string
          description: Type of Strategy. See Strategy types under enumerations section for possible options.
          example: PASSIVE
          enum:
            - ACTIVE
            - PASSIVE
        managementFee:
          type: number
        performanceFee:
          type: number
        performanceFeeCollectionPeriod:
          type: string
        entryFee:
          type: number
        exitFee:
          type: number
        followers:
          type: integer
          format: int64
    Deposit:
      type: object
      properties:
        currency:
          type: string
        address:
          type: string
    Balance:
      type: object
      properties:
        currency:
          type: string
        daaList:
          type: array
          items:
            $ref: '#/components/schemas/BalanceEntry'
        assetList:
          type: array
          items:
            $ref: '#/components/schemas/BalanceEntry'
    BalanceEntry:
      type: object
      properties:
        name:
          type: string
        ticker:
          type: string
        balance:
          type: string
        value:
          type: string
    Activity:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    AssetInfo:
      type: object
      properties:
        ticker:
          type: string
          description: Ticker
          example: BLX
        name:
          type: string
          example: Blockchain Index
    Asset:
      type: object
      properties:
        ticker:
          type: string
          example: BTC
        supported:
          type: boolean
          description: 'Tells if asset is supported on platform, even if not publicly available for end users'
        useInStrategy:
          type: boolean
          description: Tells if asset can be used in strategy
        tradable:
          type: boolean
          description: Tells if asset can be directly tradable.
        status:
          type: string
          description: Asset status
          enum:
            - ONLINE
            - OFFLINE
            - DELISTING
            - DELISTED
            - MAINTENANCE
  securitySchemes:
    ApiKey:
      type: apiKey
      name: ICN-API-KEY
      in: header
    ApiSign:
      type: apiKey
      name: ICN-SIGN
      in: header
    ApiTimestamp:
      type: apiKey
      name: ICN-TIMESTAMP
      in: header
